"#[doc =\n\" Core of the governance system, designed to be extended though various modules.\"]\n#[doc = \"\"]\n#[doc =\n\" This contract is abstract and requires several functions to be implemented in various modules:\"]\n#[doc = \"\"]\n#[doc =\n\" - A counting module must implement `quorum`, `_quorum_reached`, `_vote_succeeded` and `_count_vote`}\"]\n#[doc = \" - A voting module must implement `_get_votes`\"]\n#[doc = \" - Additionally, `voting_period` must also be implemented\"] pub trait\nGovernor\n{\n    #[doc =\n    \" Hashing function used to (re)build the proposal id from the proposal details.\"]\n    #[ink(message)] #[ink(selector = 2433326737u32)] fn\n    hash_proposal(& self, transactions : Vec < Transaction >, description_hash\n    : HashType,) -> Result < HashType, GovernanceError > ;\n    #[doc = \" Current state of a proposal, following Compound\\'s convention\"]\n    #[ink(message)] #[ink(selector = 2704258116u32)] fn\n    state(& self, proposal_id : ProposalId) -> Result < ProposalState,\n    GovernanceError > ;\n    #[doc = \" Returns timestamp at which votes for a proposal starts\"]\n    #[ink(message)] #[ink(selector = 923073605u32)] fn\n    proposal_snapshot(& self, proposal_id : ProposalId) -> Result < Timestamp,\n    GovernanceError > ;\n    #[doc = \" Returns timestamp at which votes for a proposal ends\"]\n    #[ink(message)] #[ink(selector = 2527236198u32)] fn\n    proposal_deadline(& self, proposal_id : ProposalId) -> Result < Timestamp,\n    GovernanceError > ;\n    #[doc = \" Returns the AccountId of the proposer of a proposal\"]\n    #[ink(message)] #[ink(selector = 1440468979u32)] fn\n    proposal_proposer(& self, proposal_id : ProposalId) -> Result < AccountId,\n    GovernanceError > ;\n    #[doc =\n    \" Returns the number of votes already casted for a proposal by a given account\"]\n    #[ink(message)] #[ink(selector = 6007757u32)] fn\n    get_votes_with_params(& mut self, account : AccountId, timestamp :\n    Timestamp, params : Vec < u8 >,) -> Result < u128, GovernanceError > ;\n    #[doc = \" Makes a proposal for a list of transactions to be executed.\"]\n    #[doc = \" Returns the id of the proposal\"] #[ink(message)]\n    #[ink(selector = 2879059811u32)] fn\n    propose(& mut self, transactions : Vec < Transaction >, description :\n    String) -> Result < ProposalId, GovernanceError > ;\n    #[doc = \" Executes a proposal if it is in the `Succeeded` state.\"]\n    #[doc = \" Returns the id of the executed proposal\"] #[ink(message)]\n    #[ink(selector = 3205808032u32)] fn\n    execute(& mut self, transactions : Vec < Transaction >, description_hash :\n    HashType,) -> Result < ProposalId, GovernanceError > ;\n    #[doc = \" Cancels a proposal if it is in the `Pending` state.\"]\n    #[doc = \" Returns the id of the cancelled proposal\"] #[ink(message)]\n    #[ink(selector = 3165238213u32)] fn\n    cancel(& mut self, transactions : Vec < Transaction >, description_hash :\n    HashType,) -> Result < ProposalId, GovernanceError > ;\n    #[doc = \" Casts a vote for a proposal from a message sender.\"]\n    #[doc =\n    \" Returns the number of votes already casted for the proposal by the sender\"]\n    #[ink(message)] #[ink(selector = 2763955421u32)] fn\n    cast_vote(& mut self, proposal_id : ProposalId, support : VoteType, reason\n    : Option < String >, params : Option < Vec < u8 > >,) -> Result < Balance,\n    GovernanceError > ;\n    #[doc =\n    \" Casts a vote with signature for a proposal from a message sender. Returns the number of votes already casted for the proposal by the sender\"]\n    #[ink(message)] #[ink(selector = 3152128964u32)] fn\n    cast_vote_with_signature(& mut self, proposal_id : ProposalId, support :\n    VoteType, reason : String, signature : Signature,) -> Result < Balance,\n    GovernanceError > ;\n    #[doc =\n    \" Casts a vote with signature and parameters for a proposal from a message sender. Returns the number of votes already casted for the proposal by the sender\"]\n    #[ink(message)] #[ink(selector = 1626008947u32)] fn\n    cast_vote_with_signature_and_params(& mut self, proposal_id : ProposalId,\n    support : VoteType, reason : String, signature : Signature, params : Vec <\n    u8 >,) -> Result < Balance, GovernanceError > ;\n    #[doc =\n    \" Relays a transaction or function call to an arbitrary target. In cases where the governance executor\"]\n    #[doc =\n    \" is some contract other than the governor itself, like when using a timelock, this function can be invoked\"]\n    #[doc =\n    \" in a governance proposal to recover tokens or Ether that was sent to the governor contract by mistake.\"]\n    #[ink(message)] #[ink(selector = 442019209u32)] fn\n    relay(& mut self, target : AccountId, transaction : Transaction) -> Result\n    < (), GovernanceError > ;\n}"